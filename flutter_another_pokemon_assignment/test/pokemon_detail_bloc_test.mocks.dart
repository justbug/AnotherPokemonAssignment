// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_another_pokemon_assignment/test/pokemon_detail_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_another_pokemon_assignment/models/models.dart' as _i2;
import 'package:flutter_another_pokemon_assignment/repository/detail_repository.dart'
    as _i3;
import 'package:flutter_another_pokemon_assignment/repository/favorite_pokemon_repository.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePokemon_0 extends _i1.SmartFake implements _i2.Pokemon {
  _FakePokemon_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DetailRepositorySpec].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailRepositorySpec extends _i1.Mock
    implements _i3.DetailRepositorySpec {
  MockDetailRepositorySpec() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Pokemon> fetchDetail(String? id, String? name) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDetail, [id, name]),
            returnValue: _i4.Future<_i2.Pokemon>.value(
              _FakePokemon_0(this, Invocation.method(#fetchDetail, [id, name])),
            ),
          )
          as _i4.Future<_i2.Pokemon>);
}

/// A class which mocks [FavoritePokemonRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritePokemonRepository extends _i1.Mock
    implements _i5.FavoritePokemonRepository {
  MockFavoritePokemonRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isFavorite(String? pokemonId) =>
      (super.noSuchMethod(
            Invocation.method(#isFavorite, [pokemonId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> updateFavorite(
    String? pokemonId,
    bool? isFavorite,
    String? pokemonName,
    String? imageURL,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateFavorite, [
              pokemonId,
              isFavorite,
              pokemonName,
              imageURL,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<Set<String>> getFavoritePokemonIds() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoritePokemonIds, []),
            returnValue: _i4.Future<Set<String>>.value(<String>{}),
          )
          as _i4.Future<Set<String>>);

  @override
  _i4.Future<List<_i2.Pokemon>> getFavoritePokemonList() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoritePokemonList, []),
            returnValue: _i4.Future<List<_i2.Pokemon>>.value(<_i2.Pokemon>[]),
          )
          as _i4.Future<List<_i2.Pokemon>>);
}
